0 <= size <= 2^64
- first 3 bits indicate how many bytes the size of the tree is encoded on
    000 -> size encoded on 1 byte
    001 -> size encoded on 2 bytes
    010 -> size encoded on 3 bytes
    011 -> size encoded on 4 bytes
    ...
    111 -> size encoded on 8 bytes
  we denote the number of bytes that encode the tree size as : SIZE_LENGTH

- we read the next SIZE_LENGTH bytes and we get the tree size (as int): that's how many bits the tree occupies on the buffer

- we start parsing the tree until we complete the size

- we construct the tree and assign huffman codes to each char

- we read and decode the rest of buffer

